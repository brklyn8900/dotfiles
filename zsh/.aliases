#!/usr/bin/env zsh

# my aliases
alias a='nvim ~/.aliases'
alias ds='cd ~/devstuff'
alias db='cd ~/Dropbox'
alias l='ls -ltua'
alias rel='source ~/.zshrc'
alias py='python3'
# alias pip='pip3'
alias y='yarn dev'
alias C='code-insiders .'
alias c='code .'
alias ibrew='arch -arm64 brew'
alias nxt='HOST=0.0.0.0 PORT=8000 yarn dev'
alias spx='sphinx-autobuild docs docs/_build/html'
alias html='touch index.html style.css app.js'
alias pdt='cd /Users/ron/devstuff/projects/armana/portal-electron'
alias pdtd='cd /Users/ron/Library/Application\ Support/portal-electron'
alias i='ls -alt'
alias j='..'
alias e='zed .'
alias ws='windsurf .'
alias cr='cursor .'
alias clr='clear'
alias bd='bin/dev'
alias g='export GPG_TTY=$(tty)'
alias m='open -a "Marked 2"'
alias sky='cd /Users/ron/devstuff/projects/sky/sky_travel_club'
alias ez='eza --git -lh'
alias cp='starship preset catppuccin-powerline -o ~/.config/starship.toml'
alias sb='starship preset nerd-font-symbols -o ~/.config/starship.toml'
alias gm='git checkout main'
alias zd='zellij --layout ~/.config/zellij/claude_layout.kdl'
alias zr='zellij --layout ~/.config/zellij/rails_layout.kdl'
alias zs='zellij --layout ~/.config/zellij/claude_simple.kdl'

# rails
alias dbmp='rails heroku:refresh_local_from_production'
alias dbm='rails db:migrate'
alias rgrep='ps aux | grep -i "rails.*server\|puma" | grep -v grep | head -5'

# Git
alias gs='git status'
alias gss='git status --short'
alias gu='git add -u'
alias gi='git commit -m "initial commit"'

alias pkg='cat package.json'
alias apps='cd /Users/ron/devstuff/projects/armana/apps'
alias sup='pnpm dlx shadcn@latest add https://supabase.com/ui/r/ai-editor-rules.json'

# Armana
alias pweb='ssh ron@173.255.233.45'
alias aweb='ssh devadmin@50.116.48.151'

# mysql commands
alias mysql=/usr/local/mysql/bin/mysql
alias mysqladmin=/usr/local/mysql/bin/mysqladmin
alias mystart="sudo /usr/local/mysql/support-files/mysql.server start"
alias mystop="sudo /usr/local/mysql/support-files/mysql.server stop"

# cpp commands
alias bldr='take build'
alias cmk='cmake -DCMAKE_BUILD_TYPE=Debug .. '
alias mkt='make -j9 koinos_tests'
alias rmb='rm -rf build'
alias tst='./tests/koinos_tests -l message' 
# ./tests/koinos_tests -l message -t log_tests/log_tests

# ssh shortcuts
alias magic='ssh rtsremote@108.30.111.9'
alias bigdaddy='ssh rtsremote@100.8.160.20'
alias washington='ssh rtsremote@71.250.245.23'
alias atlantic='ssh rtsremote@68.195.235.94'
alias armr='rsync -azPv ./ armadmin@50.116.48.151:/var/www/html -O'
alias arm='ssh armadmin@50.116.48.151'
alias miner='ssh ron@192.168.0.129'
alias rapi='ron@172.104.8.72'
alias six='rsync -azPv ./ ron@45.79.175.16:/var/www/116st.com/html/'
alias rmna='ssh armadmin@50.116.48.151'
alias 116="ssh ron@45.79.175.16"
alias prtl="ssh ron@173.255.233.45"

# Koinos SSH
alias kproxy='ssh koinosadmin@45.79.43.45'
alias kis='ssh koinos@69.164.218.219'
alias kds='ssh koinos@173.255.232.131'
alias kw='ssh koinosadmin@45.33.99.34'
alias kwp='ssh koinoswp@97.107.142.70'
alias knode='ssh ron@45.79.175.16'
alias kg='ssh ron@45.79.136.45'
alias proxy='ssh koinosadmin@45.79.43.45'

# rails stuff
alias bw="bundle install --without production"

alias blocks="./programs/koinos_block_producer/koinos_block_producer -a amqp://guest:guest@localhost:5672/ --algorithm pow"

# Some aliases for Homebrew
alias bup='brew update && brew upgrade'
alias bout='brew outdated'
alias bin='brew install'
alias brm='brew uninstall'
alias bls='brew list'
alias bsr='brew search'
alias binf='brew info'
alias bdr='brew doctor'

# Some directory listing with colors
alias sl=ls
alias ls='ls -G'        # Compact view, show colors
alias la='ls -AF'       # Compact view, show hidden
alias ll='ls -al'
alias l='ls -a'
alias l1='ls -1'
alias l='ls -lha'

# because I'm to lazy to write vim
alias v='nvim'
alias n="nvim ."
alias s="sudo"

# Desktop Programs
alias xcode="open -a '/Applications/XCode.app'"
alias safari="open -a safari"
alias chrome="open -a google\ chrome"
alias f='open -a Finder '
alias fh='open -a Finder .'
alias textedit='open -a TextEdit'
alias hex='open -a "Hex Fiend"'
alias slack="open -a '/Applications/Slack.app'"

# Usefull stuff for presentation and seeing dotfiles
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
alias showall='defaults write com.apple.finder AppleShowAllFiles YES && killall Finder'
alias hideall='defaults write com.apple.finder AppleShowAllFiles NO && killall Finder'


# Get rid of those pesky .DS_Store files recursively
alias dsclean='find . -type f -name .DS_Store -print0 | xargs -0 rm'

# Flush your dns cache
alias flush='dscacheutil -flushcache'

function symLink(){
echo "Creating symlinks"
cp -f dist/js/ionic.bundle.js tmp/www/lib/ionic/js/ionic.bundle.js
cp -f dist/css/ionic.css tmp/www/lib/ionic/css/ionic.css
echo "done"
  }

  # Because Typing python -m SimpleHTTPServer is too Damn Long
  # Start an HTTP server from a directory, optionally specifying the port
  function server() {
  local port="${1:-8000}"
  #    open "http://localhost:${port}/"
  open -a google\ chrome\ canary "http://localhost:${port}/" --args --disable-web-security
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function run(){
ionic build "$1" && ionic run "$1" --device -lc
}
function sim(){
ionic build "$1" && ionic emulate "$1"
}

function download(){
curl -O "$1"
}

function highlight(){
  highlight -O rtf $1 --font-size 25 --style solarized-dark -W -J 50 -j 3 --src-lang $2 | pbcopy
}

alias dl=download
function ghUpdate() {
if git remote | grep upstream > /dev/null;
then
  echo "upstream is set"
else
  read "?Whats the URl of the original repo? | " answer
  # Add the remote, call it "upstream":
  echo $answer
  git remote add upstream $answer

fi
git fetch upstream
git checkout master
git rebase upstream/master
  }

function ghPages(){
  if [ -z "$1" ]
  then
    echo "Which folder do you want to deploy to GitHub Pages?"
    exit 1
  fi
  git subtree push --prefix $1 origin gh-pages

}

# incase i forget how to clear
#  alias c='clear'
  alias k='clear'
  alias cls='clear'

# presentation crap
  # alias whoamireally='echo "Mike Hartington
  # Dev Advocate for Ionic
  # Beer lover and Cat lover" '

# archive file or folder
  function compress()
  {
    dirPriorToExe=`pwd`
    dirName=`dirname $1`
    baseName=`basename $1`

    if [ -f $1 ] ; then
      echo "It was a file change directory to $dirName"
      cd $dirName
      case $2 in
        tar.bz2)
          tar cjf $baseName.tar.bz2 $baseName
          ;;
        tar.gz)
          tar czf $baseName.tar.gz $baseName
          ;;
        gz)
          gzip $baseName
          ;;
        tar)
          tar -cvvf $baseName.tar $baseName
          ;;
        zip)
          zip -r $baseName.zip $baseName
          ;;
        *)
          echo "Method not passed compressing using tar.bz2"
          tar cjf $baseName.tar.bz2 $baseName
          ;;
      esac
      echo "Back to Directory $dirPriorToExe"
      cd $dirPriorToExe
    else
      if [ -d $1 ] ; then
        echo "It was a Directory change directory to $dirName"
        cd $dirName
        case $2 in
          tar.bz2)
            tar cjf $baseName.tar.bz2 $baseName
            ;;
          tar.gz)
            tar czf $baseName.tar.gz $baseName
            ;;
          gz)
            gzip -r $baseName
            ;;
          tar)
            tar -cvvf $baseName.tar $baseName
            ;;
          zip)
            zip -r $baseName.zip $baseName
            ;;
          *)
            echo "Method not passed compressing using tar.bz2"
            tar cjf $baseName.tar.bz2 $baseName
            ;;
        esac
        echo "Back to Directory $dirPriorToExe"
        cd $dirPriorToExe
      else
        echo "'$1' is not a valid file/folder"
      fi
    fi
    echo "Done"
    echo "###########################################"
  }

  # Extract archives - use: extract <file>
  # Based on http://dotfiles.org/~pseup/.bashrc
  function extract() {
  local remove_archive
  local success
  local file_name
  local extract_dir

  if (( $# == 0 )); then
    echo "Usage: extract [-option] [file ...]"
    echo
    echo Options:
    echo "    -r, --remove    Remove archive."
  fi

  remove_archive=1
  if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then
    remove_archive=0
    shift
  fi

  while (( $# > 0 )); do
    if [[ ! -f "$1" ]]; then
      echo "extract: '$1' is not a valid file" 1>&2
      shift
      continue
    fi

    success=0
    file_name="$( basename "$1" )"
    extract_dir="$( echo "$file_name" | sed "s/\.${1##*.}//g" )"
    case "$1" in
      (*.tar.gz|*.tgz) [ -z $commands[pigz] ] && tar zxvf "$1" || pigz -dc "$1" | tar xv ;;
      (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;
      (*.tar.xz|*.txz) tar --xz --help &> /dev/null \
        && tar --xz -xvf "$1" \
        || xzcat "$1" | tar xvf - ;;
    (*.tar.zma|*.tlz) tar --lzma --help &> /dev/null \
      && tar --lzma -xvf "$1" \
      || lzcat "$1" | tar xvf - ;;
  (*.tar) tar xvf "$1" ;;
  (*.gz) [ -z $commands[pigz] ] && gunzip "$1" || pigz -d "$1" ;;
  (*.bz2) bunzip2 "$1" ;;
  (*.xz) unxz "$1" ;;
  (*.lzma) unlzma "$1" ;;
  (*.Z) uncompress "$1" ;;
  (*.zip|*.war|*.jar|*.sublime-package) unzip "$1" -d $extract_dir ;;
  (*.rar) unrar x -ad "$1" ;;
  (*.7z) 7za x "$1" ;;
  (*.deb)
    mkdir -p "$extract_dir/control"
    mkdir -p "$extract_dir/data"
    cd "$extract_dir"; ar vx "../${1}" > /dev/null
    cd control; tar xzvf ../control.tar.gz
    cd ../data; tar xzvf ../data.tar.gz
    cd ..; rm *.tar.gz debian-binary
    cd ..
    ;;
  (*)
    echo "extract: '$1' cannot be extracted" 1>&2
    success=1
    ;;
esac

(( success = $success > 0 ? $success : $? ))
(( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"
shift
  done
}
alias x=extract



function gif(){
   ffmpeg -i $1 -vf scale=$2:-1:flags=lanczos -f gif - | gifsicle --optimize=3 --delay=3 > $3
}

function fixSSH(){
  eval $(ssh-agent);
  ssh-add ~/.ssh/id_rsa
}

alias rcs='             (trap "graytab" SIGINT SIGTERM EXIT; orangetab; rc $(get_app staging))'
alias rcp='             (trap "graytab" SIGINT SIGTERM EXIT; redtab; rc $(get_app production))'

# Make tab red
redtab() {
  graytab
  echo -ne '\033]6;1;bg;red;brightness;255\a'
  return 0
}

# Make tab orange
orangetab() {
  graytab
  echo -ne '\033]6;1;bg;red;brightness;255\a'
  echo -ne '\033]6;1;bg;green;brightness;165\a'
  echo -ne '\033]6;1;bg;blue;brightness;0\a'
  return 0
}

# Make tab black/default
graytab() {
  echo -ne "\033]6;1;bg;*;default\a"
  return 0
}

rc() {
  if [[ -z $1 ]]; then
    bundle exec rails c
    return $?
  fi
  setenv "$1"
  heroku run bundle exec rails console -a "$1"
  graytab
  return $?
}
